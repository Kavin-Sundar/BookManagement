// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace BookManagementUsing3tierMVCwithJQuery.Resource
{
    public partial class BookmanagementContext : DbContext
    {
        public BookmanagementContext()
        {
        }

        public BookmanagementContext(DbContextOptions<BookmanagementContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AdminLogin> AdminLogin { get; set; }
        public virtual DbSet<BookDetail> BookDetail { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=STS586L-KAVIN\\SQLEXPRESS;Initial Catalog=BookManagement;User ID=sa;Password=Kavin188@");
            }
        }


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<AdminLogin>(entity =>
            {
                entity.HasKey(e => e.AdminId)
                    .HasName("PK__AdminLog__719FE4886C0B61B4");

                entity.Property(e => e.AdminId)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AdminPassword).IsRequired();

                entity.Property(e => e.AdminPasswordKey).IsRequired();

                entity.Property(e => e.CreateTimeStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("Create_Time_Stamp")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsDeleted).HasColumnName("Is_Deleted");

                entity.Property(e => e.UpdateTimeStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("Update_Time_Stamp")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<BookDetail>(entity =>
            {
                entity.HasKey(e => e.BookId)
                    .HasName("PK__BookDeta__3DE0C2078DB34F90");

                

                entity.Property(e => e.Author)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreateTimeStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("Create_Time_Stamp")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsDeleted).HasColumnName("Is_Deleted");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateTimeStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("Update_Time_Stamp")
                    .HasDefaultValueSql("(getdate())");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}